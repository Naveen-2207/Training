promise state:       

	1.pending   

	2.fulfilled

	3.failed


promise types:

	1.Promise.all  [this method is excute (pass success and reject)it will reject directly.] 
	
	2.Promise.allSettled   [this method is excute(pass success and reject) it will two outputs are displayed with state.]

	3.Promise.race  [this method is works in only time dependent.]

	
promise syntax:

	let myPromise = new promise((function(myResolve, myReject)=>{
myResolve();    //when sucessful
myReject();     //when reject 
});
myPromise.then(function(value) //code if sucessful
.catch(function(error)   //code if some error


examble program:

	SUCESS METHOD

	const  p1 = new Promise((resolve, reject) =>{
	
	setTimeout(()=>{
    	
	resolve("i'm a fullstack developer")
	
	},1000);
	
	})

	p1.then(console.log)


	ERROR METHOD

	
	const  p2 = new Promise((resolve, reject) =>{
    	
	setTimeout(()=>{
        
	reject("i'm not fullstack developer")
    
	},1000);
    	
	})
  
	p2.then(console.log).catch(console.log)


	USING PROMISE TYPES:


	const  p1 = new Promise((resolve, reject) =>{
	
	setTimeout(()=>{
    	
	resolve("i'm a fullstack developer")
	
	},1000);
	
	})
	
	const  p2 = new Promise((resolve, reject) =>{
	
	setTimeout(()=>{
	
	reject("i'm not fullstack developer")	
	
	},1000);
	
	})
	
	Promise.all([p1,p2]).then(console.log).catch(console.log)

	Promise.allSettled([p1,p2]).then(console.log).catch(console.log)
	
	Promise.race([p1,p2]).then(console.log).catch(console.log)












